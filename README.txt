Caching System using Apache Ignite

All functions are in the folder /src/main/java/startup which are as follows:

The Classes:
	BitmapOperations: 	All functions related to the bitmap.
	DataCacheOperations: 	All functions related to the Data Cache
	InitCache: 		Initializes Bitmap and data cache
	QueryExecuter: 		All experimental queries are run here
	Expt: 			Class includes database read functions for different kinds of experimental queries. To add a new kind of query this class must be used.
	Test:			Class to check the cached data properties.

Functions in each of the classes are as follows:
1. BitmapOperations:
	i.	getDBTimeRanges
		Input: bitString, start time, end time.
		Output: Arraylist of pairs with required start and end time according to string of 1s in the bitstring
	ii.	BreakQuery
		Input: ArrayList from getDBTimeRanges
		Output: Newly formed (for hourly aggregated) broken query(which excludes ranges present in the cache) to be executed on the database.
	iii.	BreakQueryMinute
		Input: ArrayList from getDBTimeRanges
		Output: Newly formed (for minutely aggregated) broken query(which excludes ranges present in the cache) to be executed on the database. 
	iv.	ANDofStrings
		Input: String array of multiple bitstrings
		Output: AND result of all the input strings
	v. 	CheckBitmapMinute
		Input: IgniteCache instance, start time, end time, sensor_id, String array of columns
		Function: Checks the minutely bitmap and both the db query and cache query decisions are made here.
	vi.	UpdateBitmapMinute
		Input:String array columns, start time, end time, sensor_id
		Function: Updates the existing minute bitmap according to recent updates in the datacache.
	vii.	UpdateBitmapHour
		Input:String array columns, start time, end time, sensor_id
		Function: Updates the existing hour bitmap according to recent updates in the datacache.
	viii.	CheckBitmap
		Input: IgniteCache instance, start time, end time, sensor_id, String array of columns
		Function: Checks the hourly bitmap and both the db query and cache query decisions are made here.
2. DataCacheOperations
	i.	UpdateDataCacheApp
		Input: List of Double values to be inserted in the datacache,List of string values to be inserted in the datacache, List of timestamps(Datatype: Double), String array of columns, start time, end time, sensor_id, granularity(hour/minute)
		Function: Updates the datacache with given input lists.
	ii.	UpdateDataCache
		Input: List of Double values to be inserted in the datacache, List of timestamps(Datatype: Double), String array of columns, start time, end time, sensor_id, granularity(hour/minute)
		Function: Updates the datacache with given input lists.
	iii.	ShowDataCache:
		Function: Shows the contents of the datacache.(For Testing)
3. QueryExecuter
	i.	QueryMinute:
		Execute a minute aggregated query
	ii.	QueryHour
		Execute an hour aggregated query
4. Expt
	i.	logsOff
	ii.	getProperties
		Connect to mysql
	iii.	getRowsByTableName
		Get rows by given input table name.
		Output: Dataset.
	//Following 3 are for insertions into the three caches.
	iv. 	InsertIntoData
	v.	InsertIntoBitmapHour
	vi.	InsertIntoBitmapMinute
	//Following three perform dataset operations for query results, this is where the query's logical plan is executed on the dataset.
	//To add a new query(with a different execution plan add a similar function to this module.)
	vii.	ExecuteonDB
	viii.	ExecuteonDBApp
	ix.	ExecuteonDBTempJoin
	x.	ExecuteonCache
		Function to execute the input query on the datacache.


Content of this folder was generated by Apache Ignite Web Console
=================================================================

Project structure:
    /config - this folder contains client and server XML configurations.
    /jdbc-drivers - this folder should contains proprietary JDBC drivers.
    /src - this folder contains generated java code.
    /src/main/java/config - this folder contains generated java classes with cluster configuration from code.
    /src/main/java/startup - this folder contains generated java classes with server and client nodes startup code.
    /src/main/java/[model] - this optional folder will be named as package name for your POJO classes and contain generated POJO files.
    /src/main/resources - this optional folder contains generated secret.properties file with security sensitive information if any.
    Dockerfile - sample Docker file. With this file you could package Ignite deployment with all the dependencies into a standard container.
    pom.xml - generated Maven project description, could be used to open generated project in IDE or build with Maven.
    README.txt - this file.

Ignite ships with CacheJdbcPojoStore, which is out-of-the-box JDBC implementation of the IgniteCacheStore 
interface, and automatically handles all the write-through and read-through logic.

You can use generated configuration and POJO classes as part of your application.

Note, in case of using proprietary JDBC drivers (Oracle, IBM DB2, Microsoft SQL Server)
you should download them manually and copy into ./jdbc-drivers folder.
